# This is a basic workflow to help you get started with Actions

name: Github Actions - main (On Release)

# Controls when the workflow will run
on:
  release:
    types: [published]


 
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment:
      name: envForGithubActions
    
      
   # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Step 1 - Checkout main branch from GitHub
        uses: actions/checkout@v2
          
      - name: Step 2 - Visualizzare tag corrente
        run: |
          echo "Vediamo il tag corrente:"
          echo "${GITHUB_REF#refs/tags/}"
          echo "${GITHUB_REF#refs/heads/}"
          echo "Vediamo se si potrebbe capire automaticamente che si usano gli hooks"
          echo "Stampa a video degli utlimi 5 caratteri del tag della release corrente"
          varTemp=$(echo "${GITHUB_REF#refs/tags/}" | tail -c 6)
          echo "$varTemp"
          echo "Vediamo qual Ã¨ l'id dell'attuale commit"
          echo "$GITHUB_SHA"
                 
      - name: Step 3 - Creazione directory Test Suite
        run: |
          ls -a
          if [ ! -d "/home/runner/work/HookTestRepo/HookTestRepo/TestSuite" ]; then
            echo "Vedi se sono dentro l'if numero 1"
            sudo mkdir TestSuite
          fi
          echo "Vediamo se ha creato la cartella"
          ls -a  

      - name: Step 4 - Set up JDK 1.8 per progetti di utility
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          
      - name: Step 5 - Set up Node
        uses: actions/setup-node@v3
        with:
            node-version: 12

      - name: Step 6 - Cache Maven pakages
        id: cache-mvn
        uses: actions/cache@v2
        with:
            path: ~/.m2
            key: ${{ runner.os }}-m2-prova
            restore-keys: |
              ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
              ${{ runner.os }}-m2-prova
              ${{ runner.os }}-m2-${{ github.event.release.v_1a_2a_m1 }}
      
      - if: ${{steps.cache-mvn.out.cache-hit != 'true'}}
        name: Step 7 - mvn clean install BACK-END
        working-directory: /home/runner/work/HookTestRepo/HookTestRepo/insert-here-your-web-app/angular-java-example-master
        run: mvn clean install

             
      - name: Step 7.1 - SEZIONE BACK-END - Esegui Applicazione Spring Boot tramite jar
        run:  |
            cd /home/runner/work/HookTestRepo/HookTestRepo
            bash startBackEnd.sh
            
      - name: Step 8 - npm install FRONT-END
        working-directory: /home/runner/work/HookTestRepo/HookTestRepo/insert-here-your-web-app/angular-java-example-master/src/main/ui
        run: npm install
        
           
      - name: Step 8.1 - SEZIONE FRONT-END - Esegui Applicazione FE tramite nmp
        run:  |
            cd /home/runner/work/HookTestRepo/HookTestRepo
            bash startFrontEnd.sh
      
                              
     
